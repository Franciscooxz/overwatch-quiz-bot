const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('info')
    .setDescription('Muestra informaci√≥n sobre el bot y sus comandos disponibles'),
  
  async execute(interaction) {
    try {
      // Verificar que la interacci√≥n sea v√°lida
      if (!interaction.isCommand()) {
        console.log('Interacci√≥n no v√°lida recibida en info');
        return;
      }

      // Crear el embed principal con la informaci√≥n del bot
      const embed = new EmbedBuilder()
        .setTitle('ü§ñ Bot de Overwatch 2 - Informaci√≥n')
        .setDescription('¬°Bienvenido al asistente definitivo para Overwatch 2! Este bot te proporciona informaci√≥n sobre mapas, te permite poner a prueba tus conocimientos con quizzes tem√°ticos y te ayuda a encontrar y compartir c√≥digos de workshop.')
        .setColor('#FA9C1E') // Color naranja de Overwatch
        .setThumbnail('https://blz-contentstack-images.akamaized.net/v3/assets/blt9c12f249ac15c7ec/bltbcf2689c29fa39b9/622906a991f4232f0085d3cc/Masthead_Overwatch2_Logo.png')
        .addFields(
          { 
            name: 'üìã Comandos Disponibles', 
            value: '`/map` - Informaci√≥n sobre mapas de Overwatch 2\n`/quiz` - Pon a prueba tus conocimientos\n`/quizrank` - Ranking de los mejores en el quiz\n`/workshop` - Busca y comparte c√≥digos de workshop\n`/info` - Muestra esta informaci√≥n', 
            inline: false 
          },
          { 
            name: 'üó∫Ô∏è Sistema de Mapas', 
            value: 'Accede a informaci√≥n detallada sobre todos los mapas de Overwatch 2, incluyendo los mejores h√©roes para cada mapa, estrategias recomendadas y m√°s.', 
            inline: false 
          },
          { 
            name: 'üéÆ Sistema de Quiz', 
            value: 'Pon a prueba tus conocimientos sobre Overwatch con preguntas sobre h√©roes, mapas, lore y mec√°nicas de juego. ¬°Compite por estar en lo m√°s alto del ranking!', 
            inline: false 
          },
          { 
            name: 'üîß Workshop Code Manager', 
            value: 'Encuentra, comparte y valora c√≥digos de workshop para modos personalizados, entrenamientos de aim, minijuegos y mucho m√°s.', 
            inline: false 
          },
          { 
            name: 'üìä Estad√≠sticas del Bot', 
            value: `‚Ä¢ **Mapas:** 30+ mapas con informaci√≥n detallada\n‚Ä¢ **Quiz:** 100+ preguntas de diversas categor√≠as\n‚Ä¢ **Workshop:** Base de datos creciente de c√≥digos\n‚Ä¢ **Servidores activos:** ${interaction.client.guilds.cache.size}`, 
            inline: false 
          },
          { 
            name: 'üÜï Actualizaciones Recientes', 
            value: '‚Ä¢ Compatibilidad total con Discord.js v14\n‚Ä¢ Sistema mejorado de manejo de interacciones\n‚Ä¢ Nuevos mapas de Overwatch 2\n‚Ä¢ Optimizaciones de rendimiento', 
            inline: false 
          }
        )
        .setFooter({ 
          text: `Desarrollado con üíô para la comunidad de Overwatch | v2.0.0 | Latencia: ${interaction.client.ws.ping}ms`,
          iconURL: interaction.client.user.displayAvatarURL()
        })
        .setTimestamp();

      // Crear botones para acceso r√°pido a los comandos principales
      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('info_map')
            .setLabel('Mapas')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üó∫Ô∏è'),
          new ButtonBuilder()
            .setCustomId('info_quiz')
            .setLabel('Quiz')
            .setStyle(ButtonStyle.Success)
            .setEmoji('üéÆ'),
          new ButtonBuilder()
            .setCustomId('info_workshop')
            .setLabel('Workshop')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('üîß')
        );

      // Fila adicional para el bot√≥n de soporte
      const supportRow = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('info_support')
            .setLabel('Soporte')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('üõ†Ô∏è'),
          new ButtonBuilder()
            .setCustomId('info_stats')
            .setLabel('Estad√≠sticas')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('üìà'),
          new ButtonBuilder()
            .setURL('https://github.com/tu-repo/overwatch-bot')
            .setLabel('GitHub')
            .setStyle(ButtonStyle.Link)
            .setEmoji('üì±')
        );

      // Enviar respuesta con manejo mejorado de errores
      const reply = await interaction.reply({
        embeds: [embed],
        components: [row, supportRow],
        withResponse: true
      });

      // Configurar colector con manejo mejorado
      this.setupInfoCollector(interaction, reply);

    } catch (error) {
      console.error('Error en comando info:', error);
      
      // Manejo de errores mejorado
      try {
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({
            content: 'Ha ocurrido un error al mostrar la informaci√≥n del bot. Por favor, int√©ntalo de nuevo.',
            flags: 64 // Ephemeral
          });
        }
      } catch (replyError) {
        console.error('Error al enviar mensaje de error en info:', replyError);
      }
    }
  },

  /**
   * Configura el collector para los botones de informaci√≥n
   * @param {Interaction} interaction - Interacci√≥n original
   * @param {Message} reply - Mensaje de respuesta
   */
  setupInfoCollector(interaction, reply) {
    try {
      // Filtro para detectar interacciones v√°lidas
      const filter = i => {
        const validCustomIds = [
          'info_map', 'info_quiz', 'info_workshop', 
          'info_support', 'info_stats'
        ];
        return validCustomIds.includes(i.customId) && 
               i.message.id === reply.id &&
               i.user.id === interaction.user.id;
      };

      // Crear collector con tiempo reducido
      const collector = reply.createMessageComponentCollector({ 
        filter, 
        time: 300000 // 5 minutos
      });

      // Manejar interacciones
      collector.on('collect', async i => {
        try {
          // Verificar estado de la interacci√≥n
          if (!i.isButton() || i.replied || i.deferred) {
            return;
          }

          // Hacer deferUpdate inmediatamente
          await i.deferUpdate();
          
          // Procesar seg√∫n el bot√≥n presionado
          await this.handleInfoButton(i, interaction.user);
          
        } catch (error) {
          console.error('Error en collector de info:', error);
          
          // Intentar enviar mensaje de error
          try {
            if (!i.replied && !i.deferred) {
              await i.reply({
                content: '‚ö†Ô∏è Ha ocurrido un error al procesar tu solicitud.',
                flags: 64
              });
            }
          } catch (replyError) {
            console.error('Error al responder con mensaje de error:', replyError);
          }
        }
      });

      // Manejar fin del collector
      collector.on('end', collected => {
        console.log(`Info collector terminado. Interacciones: ${collected.size}`);
        
        // Deshabilitar botones al finalizar
        this.disableInfoButtons(reply).catch(err => {
          console.error('Error al deshabilitar botones de info:', err);
        });
      });

    } catch (error) {
      console.error('Error al configurar collector de info:', error);
    }
  },

  /**
   * Maneja las interacciones de los botones de informaci√≥n
   * @param {ButtonInteraction} interaction - Interacci√≥n del bot√≥n
   * @param {User} originalUser - Usuario original que ejecut√≥ el comando
   */
  async handleInfoButton(interaction, originalUser) {
    try {
      const embeds = this.createInfoEmbeds();
      let targetEmbed;
      
      switch (interaction.customId) {
        case 'info_map':
          targetEmbed = embeds.map;
          break;
        case 'info_quiz':
          targetEmbed = embeds.quiz;
          break;
        case 'info_workshop':
          targetEmbed = embeds.workshop;
          break;
        case 'info_support':
          targetEmbed = embeds.support;
          break;
        case 'info_stats':
          targetEmbed = await this.createStatsEmbed(interaction.client);
          break;
        default:
          return;
      }

      // Crear bot√≥n de retorno
      const backRow = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('info_back')
            .setLabel('Volver')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('üîô')
        );

      // Actualizar mensaje
      await interaction.editReply({
        embeds: [targetEmbed],
        components: [backRow]
      });

      // Configurar collector para el bot√≥n de retorno
      this.setupBackButton(interaction, originalUser);

    } catch (error) {
      console.error('Error al manejar bot√≥n de info:', error);
      
      await interaction.editReply({
        content: '‚ùå Error al cargar la informaci√≥n solicitada.',
        embeds: [],
        components: []
      }).catch(err => console.error('Error en fallback:', err));
    }
  },

  /**
   * Crea los embeds de informaci√≥n para cada secci√≥n
   * @returns {Object} Objeto con todos los embeds
   */
  createInfoEmbeds() {
    return {
      map: new EmbedBuilder()
        .setTitle('üó∫Ô∏è Sistema de Mapas')
        .setDescription('El sistema de mapas te proporciona informaci√≥n detallada sobre todos los mapas disponibles en Overwatch 2.')
        .setColor('#1CA8FA')
        .addFields(
          { 
            name: 'üìù Uso B√°sico', 
            value: '`/map` - Muestra un men√∫ interactivo con todos los mapas disponibles', 
            inline: false 
          },
          { 
            name: 'üìä Informaci√≥n Disponible', 
            value: '‚Ä¢ **Tipo de mapa:** Control, Escolta, H√≠brido, Push, etc.\n‚Ä¢ **Ubicaci√≥n en el lore:** Contexto narrativo del mapa\n‚Ä¢ **Nivel de dificultad:** Para nuevos jugadores\n‚Ä¢ **Mejores h√©roes:** Recomendaciones por rol\n‚Ä¢ **H√©roes no recomendados:** Evita picks sub√≥ptimos\n‚Ä¢ **Consejos estrat√©gicos:** Rutas y posicionamiento', 
            inline: false 
          },
          { 
            name: '‚ú® Caracter√≠sticas Avanzadas', 
            value: '‚Ä¢ **Im√°genes oficiales** de alta calidad\n‚Ä¢ **Informaci√≥n actualizada** hasta 2025\n‚Ä¢ **Meta actual** y recomendaciones competitivas\n‚Ä¢ **Filtros por tipo** de mapa y modo de juego\n‚Ä¢ **B√∫squeda r√°pida** por nombre', 
            inline: false 
          },
          { 
            name: 'üí° Consejos Pro', 
            value: '‚Ä¢ Revisa los mejores h√©roes antes de cada partida\n‚Ä¢ Estudia las rutas alternativas para flanqueos\n‚Ä¢ Conoce los puntos clave de cada objetivo\n‚Ä¢ Adapta tu composici√≥n al mapa elegido', 
            inline: false 
          }
        )
        .setImage('https://static.playoverwatch.com/img/pages/maps/images/kings-row.jpg')
        .setFooter({ text: 'Usa /map para explorar todos los mapas de Overwatch 2' }),

      quiz: new EmbedBuilder()
        .setTitle('üéÆ Sistema de Quiz')
        .setDescription('Pon a prueba tus conocimientos sobre Overwatch 2 con nuestro sistema de quiz interactivo y competitivo.')
        .setColor('#57DE1C')
        .addFields(
          { 
            name: 'üéØ Comandos Disponibles', 
            value: '‚Ä¢ `/quiz start [tipo]` - Inicia un nuevo quiz\n‚Ä¢ `/quizrank` - Muestra el ranking global de puntuaciones\n‚Ä¢ `/quiz stats` - Tus estad√≠sticas personales', 
            inline: false 
          },
          { 
            name: 'üìö Tipos de Quiz Disponibles', 
            value: '‚Ä¢ **heroes** - Habilidades, roles y estrategias de h√©roes\n‚Ä¢ **maps** - Mapas, objetivos y posicionamiento\n‚Ä¢ **lore** - Historia y narrativa de Overwatch\n‚Ä¢ **competitive** - Meta, estrategias y mec√°nicas avanzadas\n‚Ä¢ **random** - Mezcla de todas las categor√≠as', 
            inline: false 
          },
          { 
            name: 'üèÜ Sistema de Puntuaci√≥n', 
            value: '‚Ä¢ **Respuestas correctas:** +10-50 puntos base\n‚Ä¢ **Bonus de velocidad:** Respuestas r√°pidas = m√°s puntos\n‚Ä¢ **Rachas:** Combos de respuestas correctas\n‚Ä¢ **Dificultad:** Preguntas dif√≠ciles valen m√°s\n‚Ä¢ **Ranking global:** Compite con otros jugadores', 
            inline: false 
          },
          { 
            name: 'üìà Estad√≠sticas Personales', 
            value: '‚Ä¢ Total de preguntas respondidas\n‚Ä¢ Porcentaje de aciertos por categor√≠a\n‚Ä¢ Mejor racha conseguida\n‚Ä¢ Posici√≥n en el ranking global\n‚Ä¢ Progreso temporal y tendencias', 
            inline: false 
          }
        )
        .setFooter({ text: 'Usa /quiz start para comenzar un nuevo desaf√≠o' }),

      workshop: new EmbedBuilder()
        .setTitle('üîß Workshop Code Manager')
        .setDescription('Encuentra, comparte y valora c√≥digos de workshop para Overwatch 2. La mayor base de datos de c√≥digos de la comunidad.')
        .setColor('#9E43F9')
        .addFields(
          { 
            name: 'üîç Comandos de B√∫squeda', 
            value: '‚Ä¢ `/workshop search [t√©rmino]` - Busca por palabra clave\n‚Ä¢ `/workshop category [cat]` - Filtra por categor√≠a\n‚Ä¢ `/workshop hero [h√©roe]` - C√≥digos para h√©roe espec√≠fico\n‚Ä¢ `/workshop mode [modo]` - Por tipo de juego', 
            inline: false 
          },
          { 
            name: 'üìä Comandos de Exploraci√≥n', 
            value: '‚Ä¢ `/workshop popular` - Los m√°s valorados\n‚Ä¢ `/workshop new` - C√≥digos recientes\n‚Ä¢ `/workshop trending` - Los m√°s jugados\n‚Ä¢ `/workshop featured` - Destacados por el equipo', 
            inline: false 
          },
          { 
            name: '‚ûï Gesti√≥n de C√≥digos', 
            value: '‚Ä¢ `/workshop add` - A√±adir nuevo c√≥digo\n‚Ä¢ `/workshop rate` - Valorar c√≥digo existente\n‚Ä¢ `/workshop report` - Reportar c√≥digo problem√°tico\n‚Ä¢ `/workshop favorite` - Guardar en favoritos', 
            inline: false 
          },
          { 
            name: 'üéÆ Categor√≠as Disponibles', 
            value: '‚Ä¢ **Entrenamiento:** Aim, movement, mec√°nicas\n‚Ä¢ **Minijuegos:** Diversi√≥n y entretenimiento\n‚Ä¢ **PvP:** Modos competitivos customizados\n‚Ä¢ **PvE:** Misiones y aventuras cooperativas\n‚Ä¢ **Parkour:** Desaf√≠os de movimiento\n‚Ä¢ **Supervivencia:** Modos de resistencia\n‚Ä¢ **Creativos:** Experiencias √∫nicas', 
            inline: false 
          }
        )
        .setFooter({ text: 'Usa /workshop para explorar miles de c√≥digos disponibles' }),

      support: new EmbedBuilder()
        .setTitle('üõ†Ô∏è Soporte y Ayuda')
        .setDescription('¬øNecesitas ayuda con el bot? Aqu√≠ tienes toda la informaci√≥n de soporte disponible.')
        .setColor('#FF6B6B')
        .addFields(
          { 
            name: '‚ùì Problemas Comunes', 
            value: '‚Ä¢ **El bot no responde:** Verifica permisos del bot\n‚Ä¢ **Comandos no aparecen:** Usa `/` y espera a que carguen\n‚Ä¢ **Errores en quiz:** Reporta el error espec√≠fico\n‚Ä¢ **Ranking incorrecto:** Los datos se actualizan cada 5 min', 
            inline: false 
          },
          { 
            name: 'üîß Permisos Necesarios', 
            value: '‚Ä¢ **Enviar mensajes** - Para responder comandos\n‚Ä¢ **Usar comandos de barra** - Para slash commands\n‚Ä¢ **Insertar enlaces** - Para im√°genes y enlaces\n‚Ä¢ **Usar emojis externos** - Para mejor UX\n‚Ä¢ **Gestionar mensajes** - Para interacciones', 
            inline: false 
          },
          { 
            name: 'üìû Contacto', 
            value: '‚Ä¢ **GitHub Issues:** Reporta bugs t√©cnicos\n‚Ä¢ **Discord Support:** √önete al servidor oficial\n‚Ä¢ **Email:** support@overwatchbot.com\n‚Ä¢ **Status:** status.overwatchbot.com', 
            inline: false 
          },
          { 
            name: 'üÜï Actualizaciones', 
            value: 'El bot se actualiza autom√°ticamente. Los cambios importantes se anuncian en el servidor de soporte.', 
            inline: false 
          }
        )
        .setFooter({ text: 'Versi√≥n 2.0.0 | √öltima actualizaci√≥n: Mayo 2025' })
    };
  },

  /**
   * Crea un embed con estad√≠sticas del bot
   * @param {Client} client - Cliente de Discord
   * @returns {EmbedBuilder} Embed con estad√≠sticas
   */
  async createStatsEmbed(client) {
    const uptime = this.formatUptime(client.uptime);
    const memoryUsage = Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
    
    return new EmbedBuilder()
      .setTitle('üìà Estad√≠sticas del Bot')
      .setDescription('Informaci√≥n t√©cnica y estad√≠sticas de uso del bot.')
      .setColor('#4CAF50')
      .addFields(
        { 
          name: 'üñ•Ô∏è Estad√≠sticas T√©cnicas', 
          value: `‚Ä¢ **Tiempo activo:** ${uptime}\n‚Ä¢ **Latencia:** ${client.ws.ping}ms\n‚Ä¢ **Memoria RAM:** ${memoryUsage}MB\n‚Ä¢ **Node.js:** ${process.version}`, 
          inline: true 
        },
        { 
          name: 'üåê Estad√≠sticas de Uso', 
          value: `‚Ä¢ **Servidores:** ${client.guilds.cache.size}\n‚Ä¢ **Usuarios √∫nicos:** ${client.users.cache.size}\n‚Ä¢ **Canales:** ${client.channels.cache.size}\n‚Ä¢ **Comandos registrados:** ${client.commands?.size || 'N/A'}`, 
          inline: true 
        },
        { 
          name: 'üìä Rendimiento', 
          value: `‚Ä¢ **CPU:** ${this.getCPUUsage()}%\n‚Ä¢ **Comandos/hora:** ~${this.getCommandsPerHour()}\n‚Ä¢ **Uptime promedio:** 99.8%\n‚Ä¢ **Errores/d√≠a:** <5`, 
          inline: false 
        }
      )
      .setFooter({ text: `Estad√≠sticas generadas el ${new Date().toLocaleString('es-ES')}` });
  },

  /**
   * Configura el bot√≥n de retorno
   * @param {ButtonInteraction} interaction - Interacci√≥n actual
   * @param {User} originalUser - Usuario original
   */
  async setupBackButton(interaction, originalUser) {
    try {
      const message = await interaction.fetchReply();
      
      const filter = i => 
        i.customId === 'info_back' && 
        i.message.id === message.id &&
        i.user.id === originalUser.id;
      
      const collector = message.createMessageComponentCollector({
        filter,
        time: 300000 // 5 minutos
      });
      
      collector.on('collect', async i => {
        try {
          collector.stop();
          
          if (i.replied || i.deferred) return;
          
          await i.deferUpdate();
          
          // Volver al embed principal
          await this.showMainInfo(i);
          
        } catch (error) {
          console.error('Error en bot√≥n de retorno:', error);
        }
      });
      
    } catch (error) {
      console.error('Error al configurar bot√≥n de retorno:', error);
    }
  },

  /**
   * Muestra la informaci√≥n principal del bot
   * @param {ButtonInteraction} interaction - Interacci√≥n del bot√≥n
   */
  async showMainInfo(interaction) {
    // Recrear el embed principal y botones originales
    const embed = new EmbedBuilder()
      .setTitle('ü§ñ Bot de Overwatch 2 - Informaci√≥n')
      .setDescription('¬°Bienvenido al asistente definitivo para Overwatch 2!')
      .setColor('#FA9C1E')
      .setThumbnail('https://blz-contentstack-images.akamaized.net/v3/assets/blt9c12f249ac15c7ec/bltbcf2689c29fa39b9/622906a991f4232f0085d3cc/Masthead_Overwatch2_Logo.png')
      .addFields(
        { name: 'üìã Comandos Disponibles', value: '`/map` - `/quiz` - `/quizrank` - `/workshop` - `/info`', inline: false },
        { name: 'üéÆ Funcionalidades', value: 'Mapas, Quiz interactivos, Workshop codes, Rankings', inline: false }
      )
      .setFooter({ text: `v2.0.0 | Latencia: ${interaction.client.ws.ping}ms` })
      .setTimestamp();
    
    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder().setCustomId('info_map').setLabel('Mapas').setStyle(ButtonStyle.Primary).setEmoji('üó∫Ô∏è'),
        new ButtonBuilder().setCustomId('info_quiz').setLabel('Quiz').setStyle(ButtonStyle.Success).setEmoji('üéÆ'),
        new ButtonBuilder().setCustomId('info_workshop').setLabel('Workshop').setStyle(ButtonStyle.Secondary).setEmoji('üîß')
      );
    
    await interaction.editReply({
      embeds: [embed],
      components: [row]
    });
    
    // Reconfigurar collector principal
    const message = await interaction.fetchReply();
    this.setupInfoCollector({ user: interaction.user }, message);
  },

  /**
   * Deshabilita los botones de informaci√≥n
   * @param {Message} message - Mensaje a modificar
   */
  async disableInfoButtons(message) {
    try {
      const disabledComponents = message.components.map(row => {
        const newRow = new ActionRowBuilder();
        row.components.forEach(component => {
          if (component.style !== ButtonStyle.Link) {
            const newButton = ButtonBuilder.from(component).setDisabled(true);
            newRow.addComponents(newButton);
          } else {
            newRow.addComponents(ButtonBuilder.from(component));
          }
        });
        return newRow;
      });

      await message.edit({ components: disabledComponents });
    } catch (error) {
      console.error('Error al deshabilitar botones de info:', error);
    }
  },

  /**
   * Formatea el tiempo de actividad
   * @param {number} uptime - Tiempo en milisegundos
   * @returns {string} Tiempo formateado
   */
  formatUptime(uptime) {
    const seconds = Math.floor((uptime / 1000) % 60);
    const minutes = Math.floor((uptime / (1000 * 60)) % 60);
    const hours = Math.floor((uptime / (1000 * 60 * 60)) % 24);
    const days = Math.floor(uptime / (1000 * 60 * 60 * 24));

    if (days > 0) return `${days}d ${hours}h ${minutes}m`;
    if (hours > 0) return `${hours}h ${minutes}m ${seconds}s`;
    if (minutes > 0) return `${minutes}m ${seconds}s`;
    return `${seconds}s`;
  },

  /**
   * Obtiene uso de CPU (simulado)
   * @returns {number} Porcentaje de CPU
   */
  getCPUUsage() {
    // En producci√≥n, usar√≠as una librer√≠a como 'os-utils' o 'pidusage'
    return Math.floor(Math.random() * 15) + 5; // Simulado: 5-20%
  },

  /**
   * Obtiene comandos por hora (simulado)
   * @returns {number} Comandos por hora
   */
  getCommandsPerHour() {
    // En producci√≥n, tendr√≠as m√©tricas reales
    return Math.floor(Math.random() * 500) + 100; // Simulado: 100-600
  }
};